// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: request.proto

package request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BloomFilter_AddString_FullMethodName = "/BloomFilter/AddString"
	BloomFilter_IsThere_FullMethodName   = "/BloomFilter/IsThere"
)

// BloomFilterClient is the client API for BloomFilter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BloomFilterClient interface {
	AddString(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	IsThere(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Bool, error)
}

type bloomFilterClient struct {
	cc grpc.ClientConnInterface
}

func NewBloomFilterClient(cc grpc.ClientConnInterface) BloomFilterClient {
	return &bloomFilterClient{cc}
}

func (c *bloomFilterClient) AddString(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, BloomFilter_AddString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloomFilterClient) IsThere(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, BloomFilter_IsThere_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BloomFilterServer is the server API for BloomFilter service.
// All implementations must embed UnimplementedBloomFilterServer
// for forward compatibility
type BloomFilterServer interface {
	AddString(context.Context, *Message) (*Message, error)
	IsThere(context.Context, *Message) (*Bool, error)
	mustEmbedUnimplementedBloomFilterServer()
}

// UnimplementedBloomFilterServer must be embedded to have forward compatible implementations.
type UnimplementedBloomFilterServer struct {
}

func (UnimplementedBloomFilterServer) AddString(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddString not implemented")
}
func (UnimplementedBloomFilterServer) IsThere(context.Context, *Message) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsThere not implemented")
}
func (UnimplementedBloomFilterServer) mustEmbedUnimplementedBloomFilterServer() {}

// UnsafeBloomFilterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BloomFilterServer will
// result in compilation errors.
type UnsafeBloomFilterServer interface {
	mustEmbedUnimplementedBloomFilterServer()
}

func RegisterBloomFilterServer(s grpc.ServiceRegistrar, srv BloomFilterServer) {
	s.RegisterService(&BloomFilter_ServiceDesc, srv)
}

func _BloomFilter_AddString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloomFilterServer).AddString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloomFilter_AddString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloomFilterServer).AddString(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloomFilter_IsThere_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloomFilterServer).IsThere(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BloomFilter_IsThere_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloomFilterServer).IsThere(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// BloomFilter_ServiceDesc is the grpc.ServiceDesc for BloomFilter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BloomFilter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BloomFilter",
	HandlerType: (*BloomFilterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddString",
			Handler:    _BloomFilter_AddString_Handler,
		},
		{
			MethodName: "IsThere",
			Handler:    _BloomFilter_IsThere_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request.proto",
}
